package dms_enterprise

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListDataLakeDatabase invokes the dms_enterprise.ListDataLakeDatabase API synchronously
func (client *Client) ListDataLakeDatabase(request *ListDataLakeDatabaseRequest) (response *ListDataLakeDatabaseResponse, err error) {
	response = CreateListDataLakeDatabaseResponse()
	err = client.DoAction(request, response)
	return
}

// ListDataLakeDatabaseWithChan invokes the dms_enterprise.ListDataLakeDatabase API asynchronously
func (client *Client) ListDataLakeDatabaseWithChan(request *ListDataLakeDatabaseRequest) (<-chan *ListDataLakeDatabaseResponse, <-chan error) {
	responseChan := make(chan *ListDataLakeDatabaseResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListDataLakeDatabase(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListDataLakeDatabaseWithCallback invokes the dms_enterprise.ListDataLakeDatabase API asynchronously
func (client *Client) ListDataLakeDatabaseWithCallback(request *ListDataLakeDatabaseRequest, callback func(response *ListDataLakeDatabaseResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListDataLakeDatabaseResponse
		var err error
		defer close(result)
		response, err = client.ListDataLakeDatabase(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListDataLakeDatabaseRequest is the request struct for api ListDataLakeDatabase
type ListDataLakeDatabaseRequest struct {
	*requests.RpcRequest
	SearchKey   string           `position:"Query" name:"SearchKey"`
	Tid         requests.Integer `position:"Query" name:"Tid"`
	NextToken   string           `position:"Query" name:"NextToken"`
	CatalogName string           `position:"Query" name:"CatalogName"`
	DataRegion  string           `position:"Query" name:"DataRegion"`
	MaxResults  requests.Integer `position:"Query" name:"MaxResults"`
}

// ListDataLakeDatabaseResponse is the response struct for api ListDataLakeDatabase
type ListDataLakeDatabaseResponse struct {
	*responses.BaseResponse
	RequestId    string                             `json:"RequestId" xml:"RequestId"`
	Success      bool                               `json:"Success" xml:"Success"`
	ErrorCode    string                             `json:"ErrorCode" xml:"ErrorCode"`
	ErrorMessage string                             `json:"ErrorMessage" xml:"ErrorMessage"`
	NextToken    string                             `json:"NextToken" xml:"NextToken"`
	MaxResults   int                                `json:"MaxResults" xml:"MaxResults"`
	DatabaseList DatabaseListInListDataLakeDatabase `json:"DatabaseList" xml:"DatabaseList"`
}

// CreateListDataLakeDatabaseRequest creates a request to invoke ListDataLakeDatabase API
func CreateListDataLakeDatabaseRequest() (request *ListDataLakeDatabaseRequest) {
	request = &ListDataLakeDatabaseRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("dms-enterprise", "2018-11-01", "ListDataLakeDatabase", "dms-enterprise", "openAPI")
	request.Method = requests.POST
	return
}

// CreateListDataLakeDatabaseResponse creates a response to parse from ListDataLakeDatabase response
func CreateListDataLakeDatabaseResponse() (response *ListDataLakeDatabaseResponse) {
	response = &ListDataLakeDatabaseResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
