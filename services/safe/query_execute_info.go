package safe

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryExecuteInfo invokes the safe.QueryExecuteInfo API synchronously
func (client *Client) QueryExecuteInfo(request *QueryExecuteInfoRequest) (response *QueryExecuteInfoResponse, err error) {
	response = CreateQueryExecuteInfoResponse()
	err = client.DoAction(request, response)
	return
}

// QueryExecuteInfoWithChan invokes the safe.QueryExecuteInfo API asynchronously
func (client *Client) QueryExecuteInfoWithChan(request *QueryExecuteInfoRequest) (<-chan *QueryExecuteInfoResponse, <-chan error) {
	responseChan := make(chan *QueryExecuteInfoResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryExecuteInfo(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// QueryExecuteInfoWithCallback invokes the safe.QueryExecuteInfo API asynchronously
func (client *Client) QueryExecuteInfoWithCallback(request *QueryExecuteInfoRequest, callback func(response *QueryExecuteInfoResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryExecuteInfoResponse
		var err error
		defer close(result)
		response, err = client.QueryExecuteInfo(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// QueryExecuteInfoRequest is the request struct for api QueryExecuteInfo
type QueryExecuteInfoRequest struct {
	*requests.RpcRequest
	BuId          string                    `position:"Body" name:"BuId"`
	AuthKey       string                    `position:"Body" name:"AuthKey"`
	Product       *[]string                 `position:"Body" name:"Product"  type:"Repeated"`
	EndTime       requests.Integer          `position:"Body" name:"EndTime"`
	AuthSign      string                    `position:"Body" name:"AuthSign"`
	Source        string                    `position:"Body" name:"Source"`
	StartTime     requests.Integer          `position:"Body" name:"StartTime"`
	ReqTimestamp  requests.Integer          `position:"Body" name:"ReqTimestamp"`
	LevelTree     QueryExecuteInfoLevelTree `position:"Body" name:"LevelTree"  type:"Struct"`
	Limit         requests.Integer          `position:"Body" name:"Limit"`
	BgVid         string                    `position:"Body" name:"BgVid"`
	ExVid         string                    `position:"Body" name:"ExVid"`
	SourceOrderId string                    `position:"Body" name:"SourceOrderId"`
	Az            *[]string                 `position:"Body" name:"Az"  type:"Repeated"`
	Page          requests.Integer          `position:"Body" name:"Page"`
	Keyword       string                    `position:"Body" name:"Keyword"`
	Region        *[]string                 `position:"Body" name:"Region"  type:"Repeated"`
}

// QueryExecuteInfoLevelTree is a repeated param struct in QueryExecuteInfoRequest
type QueryExecuteInfoLevelTree struct {
	DataType string                                   `name:"DataType"`
	TreeData *[]QueryExecuteInfoLevelTreeTreeDataItem `name:"TreeData" type:"Repeated"`
}

// QueryExecuteInfoLevelTreeTreeDataItem is a repeated param struct in QueryExecuteInfoRequest
type QueryExecuteInfoLevelTreeTreeDataItem struct {
	Data        *[]string `name:"Data" type:"Repeated"`
	Value       *[]string `name:"Value" type:"Repeated"`
	DataSubType string    `name:"DataSubType"`
}

// QueryExecuteInfoResponse is the response struct for api QueryExecuteInfo
type QueryExecuteInfoResponse struct {
	*responses.BaseResponse
	Message   string `json:"Message" xml:"Message"`
	RequestId string `json:"RequestId" xml:"RequestId"`
	Data      string `json:"Data" xml:"Data"`
	Code      int    `json:"Code" xml:"Code"`
	Success   bool   `json:"Success" xml:"Success"`
}

// CreateQueryExecuteInfoRequest creates a request to invoke QueryExecuteInfo API
func CreateQueryExecuteInfoRequest() (request *QueryExecuteInfoRequest) {
	request = &QueryExecuteInfoRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Safe", "2022-01-17", "QueryExecuteInfo", "", "")
	request.Method = requests.POST
	return
}

// CreateQueryExecuteInfoResponse creates a response to parse from QueryExecuteInfo response
func CreateQueryExecuteInfoResponse() (response *QueryExecuteInfoResponse) {
	response = &QueryExecuteInfoResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
